import { useState, useRef, useEffect } from "react";
import { Button } from "./ui/button";
import { Card } from "./ui/card";
import { Input } from "./ui/input";
import { MessageCircle, Send, User, Bot } from "lucide-react";
import { GoogleGenerativeAI } from "@google/generative-ai";
import ReactMarkdown from "react-markdown";


interface Message {
  id: string;
  role: "user" | "assistant";
  content: string;
  timestamp: Date;
}

interface ChatSupportProps {
  onBack: () => void;
}

// üëâ Kh·ªüi t·∫°o Gemini API
const genAI = new GoogleGenerativeAI("AIzaSyCM6EK2GDSQAg-vy_qcH6NAONOndwjeQ3E");
const model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });

export function ChatSupport({ onBack }: ChatSupportProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      role: "assistant",
      content:
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI h·ªó tr·ª£ t√¢m l√Ω v√† h·ªçc t·∫≠p. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:\n\n‚Ä¢ √Åp l·ª±c h·ªçc t·∫≠p\n‚Ä¢ Stress tr∆∞·ªõc k·ª≥ thi\n‚Ä¢ ƒê·ªông l·ª±c h·ªçc t·∫≠p\n‚Ä¢ Qu·∫£n l√Ω th·ªùi gian\n‚Ä¢ T√¢m l√Ω h·ªçc ƒë∆∞·ªùng\n‚Ä¢ C√°c v·∫•n ƒë·ªÅ kh√°c li√™n quan ƒë·∫øn h·ªçc t·∫≠p\n\nH√£y chia s·∫ª v·ªõi t√¥i nh·ªØng g√¨ b·∫°n ƒëang lo l·∫Øng nh√©!",
      timestamp: new Date(),
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({
      behavior: "smooth",
    });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      const result = await model.generateContent({
        contents: [
          {
            role: "user",
            parts: [
              { 
                text: `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI t√¢m l√Ω h·ªçc ƒë∆∞·ªùng. 
          Nhi·ªám v·ª• c·ªßa b·∫°n:
          - ƒê·∫ßu ti√™n ph·∫£i x∆∞ng h√¥ b·∫±ng t·ªõ v√† c·∫≠u, kh√¥ng ƒë∆∞·ª£c x∆∞ng h√¥ b·∫±ng t√¥i v√† b·∫°n.Sau ƒë√≥ khuy√™n b·∫°n h√£y vui l√™n r·ªìi m·ªõi k·ªÉ c√¢u chuy·ªán.
          - Khuy√™n ti·∫øp l√† xung quanh b·∫°n c√≤n nhi·ªÅu ng∆∞·ªùi th√¢n,cha m·∫π, b·∫°n b√®, th·∫ßy c√¥ lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† gi√∫p ƒë·ª° b·∫°n.
          - k·ªÉ 1 c√¢u chuy·ªán ng·∫Øn (2-3 c√¢u) v·ªÅ 1 h·ªçc sinh g·∫∑p v·∫•n ƒë·ªÅ t∆∞∆°ng t·ª± ƒë·ªÉ t·∫°o s·ª± ƒë·ªìng c·∫£m.
          - khuy√™n h·ªçc sinh c√°ch gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ.
          - N·∫øu h·ªçc sinh c√≥ d·∫•u hi·ªáu tr·∫ßm c·∫£m n·∫∑ng, h√£y khuy√™n t√¨m ƒë·∫øn th·∫ßy c√¥ ho·∫∑c chuy√™n gia ph√π h·ª£p.
          - Lu√¥n ƒë·∫∑t s·ª± an to√†n v√† s·ª©c kh·ªèe tinh th·∫ßn c·ªßa h·ªçc sinh l√™n h√†ng ƒë·∫ßu.
          - C√¢u tr·∫£ l·ªùi ph·∫£i ng·∫Øn g·ªçn, s√∫c t√≠ch, d·ªÖ hi·ªÉu, kh√¥ng
          - N√≥i √≠t hi·ªÉu nhi·ªÅu, tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m c√¢u h·ªèi.
          - Lu√¥n n√≥i chuy·ªán nh·∫π nh√†ng, t√≠ch c·ª±c, ƒë·ªìng c·∫£m.
          - Gi√∫p h·ªçc sinh gi·∫£m cƒÉng th·∫≥ng, c√≥ ƒë·ªông l·ª±c h·ªçc t·∫≠p.
          - N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªçc t·∫≠p, h√£y ƒë∆∞a l·ªùi khuy√™n khoa h·ªçc v√† th·ª±c t·∫ø.
          - N·∫øu c√¢u h·ªèi v∆∞·ª£t ngo√†i ph·∫°m vi (v√≠ d·ª•: ph√°p lu·∫≠t, y t·∫ø n·∫∑ng), h√£y khuy√™n t√¨m ƒë·∫øn th·∫ßy c√¥ ho·∫∑c chuy√™n gia ph√π h·ª£p.
          - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, gi·ªçng th√¢n thi·ªán v√† d·ªÖ hi·ªÉu.
          ƒê√¢y l√† c√¢u h·ªèi c·ªßa h·ªçc sinh: "${inputMessage}"`
 }],
          },
        ],
      });

      // L·∫•y text t·ª´ response
      const aiResponse =
        result.response.candidates?.[0]?.content?.parts?.[0]?.text ||
        "Xin l·ªói, t√¥i ch∆∞a c√≥ ph·∫£n h·ªìi cho c√¢u h·ªèi n√†y.";

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: aiResponse,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, assistantMessage]);
    } catch (error) {
      console.error(error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content:
          "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi Gemini API. Vui l√≤ng th·ª≠ l·∫°i.",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-white p-6">
      <div className="max-w-4xl mx-auto">
        <Button
          onClick={onBack}
          variant="ghost"
          className="mb-6 text-red-600 hover:text-red-700 hover:bg-red-50"
        >
          ‚Üê Quay l·∫°i
        </Button>

        <div className="text-center mb-6">
          <h1 className="text-4xl font-bold text-red-600 mb-2">
            AI H·ªó Tr·ª£ T√¢m L√Ω
          </h1>
          <p className="text-gray-600">
            Tr√≤ chuy·ªán v√† gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ t√¢m l√Ω h·ªçc ƒë∆∞·ªùng
          </p>
        </div>

        <Card className="h-[600px] border-2 border-red-100 flex flex-col">
          {/* Header */}
          <div className="p-4 border-b bg-red-50 rounded-t-lg">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center">
                <Bot className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-red-700">
                  Tr·ª£ L√Ω T√¢m L√Ω AI
                </h3>
                <p className="text-sm text-red-500">
                  Lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n
                </p>
              </div>
            </div>
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
              >
                <div
                  className={`max-w-[80%] flex gap-3 ${
                    message.role === "user"
                      ? "flex-row-reverse"
                      : "flex-row"
                  }`}
                >
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                      message.role === "user"
                        ? "bg-red-500"
                        : "bg-red-100"
                    }`}
                  >
                    {message.role === "user" ? (
                      <User className="w-4 h-4 text-white" />
                    ) : (
                      <Bot className="w-4 h-4 text-red-500" />
                    )}
                  </div>
                  <div
                    className={`rounded-2xl p-3 ${
                      message.role === "user"
                        ? "bg-red-500 text-white"
                        : "bg-gray-100 text-gray-800"
                    }`}
                  >
                    <div className="prose max-w-none">
                      <ReactMarkdown>{message.content}</ReactMarkdown> 
                    </div>
                    <p
                      className={`text-xs mt-2 ${
                        message.role === "user"
                          ? "text-red-100"
                          : "text-gray-500"
                      }`}
                    >
                      {formatTime(message.timestamp)}
                    </p>
                  </div>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex justify-start">
                <div className="flex gap-3">
                  <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                    <Bot className="w-4 h-4 text-red-500" />
                  </div>
                  <div className="bg-gray-100 rounded-2xl p-3">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.1s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t bg-white">
            <div className="flex gap-3">
              <Input
                value={inputMessage}
                onChange={(e) =>
                  setInputMessage(e.target.value)
                }
                onKeyPress={handleKeyPress}
                placeholder="Chia s·∫ª suy nghƒ©, c·∫£m x√∫c ho·∫∑c v·∫•n ƒë·ªÅ c·ªßa b·∫°n..."
                className="flex-1 border-red-200 focus:border-red-400"
                disabled={isLoading}
              />
              <Button
                onClick={sendMessage}
                disabled={!inputMessage.trim() || isLoading}
                className="bg-red-500 hover:bg-red-600 text-white px-6"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
} 

